global int $SAGsubdivisions;
global string $SAGslider;
global int $SAGflag;
global int $SAGjobnum;
global string $SAGwindow;
python "execfile('./TopoSketch.py')";

$SAGjobnum = `scriptJob -e "ToolChanged" SAGrenewTool -permanent`;

nameCommand -ann "Kill Curve Tool" -c "KillCurveTool" KillCurveToolCommand;
hotkey -k "F5" -name "KillCurveToolCommand";
// builds the GUI Window
global proc TopoSketchWindow()
{
    global int $SAGsubdivisions;
    global string $SAGslider;
    global string $SAGwindow;

    $SAGwindow = `window -title "TopoSketch" -width 125`;
    
    columnLayout -adjustableColumn true grammarForm;
        frameLayout -label "Curve Options";
            rowLayout -numberOfColumns 1;
                button -label "Stop Drawing" -command "KillCurveTool" -width 125 -rs true ;
            setParent ..;
    
            rowLayout -numberOfColumns 1;
                button -label "Draw Boundary Curves" -command "SAGstartDrawing" -width 125 -rs true ;
            setParent ..;
            rowLayout -numberOfColumns 1;
            setParent ..;
        setParent ..;
        frameLayout -label "Patch Options";
            rowLayout -numberOfColumns 1;
                $SAGslider = `intSliderGrp -label "Subdivisions"  -field true
                -fieldMinValue 0 -fieldMaxValue 1000
                -minValue 0 -maxValue 1000 -value 20
                -dc "SAGrebuildPatches()"`;
            setParent ..;
            rowLayout -numberOfColumns 1;
                button -label "Generate Quad Patch" -command "SAGsurfaceGen" -rs true;
            setParent ..;
            
            rowLayout -numberOfColumns 1;
                button -label "Attach to Parent Mesh" -command "SAGExtractMesh" -rs true;
            setParent ..;
            rowLayout -numberOfColumns 1;
                button -label "Exit" -command "KillWindow()" -rs true;
            setParent ..;

        setParent ..;
showWindow;
}
menu -parent MayaWindow -label "TopoSketch" -tearOff true;
    menuItem -command startTopoSketch "Create Quad Patches";

//Kills the GUI Window
global proc KillWindow()
{
    global string $SAGwindow;
    deleteUI -window $SAGwindow;
    stopTopoSketch;
    
}




//Stops autorenewing curve tool
global proc KillCurveTool()
{
    global int $SAGflag;
    $SAGflag = 0;
    string $current = `currentCtx`;
    if($current == "curveContextEP")
    {
    setToolTo selectSuperContext;
    }
    
}


//Calls the python function to merge patches
global proc SAGattachPatches()
{
    global int $SAGflag;
    $SAGflag = 0;
    global int $SAGsubdivisions;
    global string $SAGslider;
    $SAGsubdivisions = `intSliderGrp -q -v $SAGslider`;
    print($SAGsubdivisions);
    python "mergePatches()";
    
    
}

//rebuilds patches to new subdivision level. Called if subdivision slider changed
global proc SAGrebuildPatches()
{    
    global int $SAGflag;
    $SAGflag = 0;
    global int $SAGsubdivisions;
    global string $SAGslider;
    $SAGsubdivisions = `intSliderGrp -q -v $SAGslider`;
    //rebuildSurface -po 1 -rpo false -n "quadMeshResult";
    //nurbsToPolygonsPref -f 0 -pc $SAGsubdivisions;
    python "mergePatches()";
    
}
// called when menu option selected.
global proc startTopoSketch()
{
    global int $SAGflag;
    $SAGflag = 1;
    TopoSketchWindow;
   
    
    string $selected[] = `ls -sl`;
    $el = $selected[0];
    rename $el "Mesh";
    if (size($selected)==1)
    {
        
        makeLive $el;
        
        
        EPCurveTool;
        
    
    }
    else if(size($selected)>1)
    {
        error "Too Many Objects Selected";
    }
    else if(size($selected)==0)
    {
        error "No Objects Selected";
    }
}
//Called when Generate Quad Patch button is pressed. Takes four boundary curves and builds a nurbs patch which is subsequently rebuilt to quad patch in the python script

global proc SAGsurfaceGen()
{
    global int $SAGflag;
    $SAGflag = 0;
    global int $SAGsubdivisions;
    global string $SAGslider;
    string $selectedcurves[];
    $selectedcurves = `ls -sl`;
    $SAGsubdivisions = `intSliderGrp -q -v $SAGslider`;
    if(size($selectedcurves)==4)
    {
        boundary -ch 1 -or 0 -ep 0 -rn 0 -po 0 -ept 0.7012 $selectedcurves[3] $selectedcurves[2] $selectedcurves[1] $selectedcurves[0];
        
        //rebuildSurface -po 1 -rpo false -n "quadMeshResult";
        //nurbsToPolygonsPref -f 0 -pc $SAGsubdivisions;
        
        
        
        
        python "mergePatches()";
    
        
        dR_conform;
        dR_DoCmd("conform");
        DeleteHistory;
        
    }
    else
    {
        error("Too many Curves");
    }
        
    
    
}

//Autorenews the Curve Tool
global proc SAGrenewTool()
{
    global int $SAGflag;
    if($SAGflag==1)
    {
        string $current = `currentCtx`;
        if($current == "selectSuperContext")
        {
            EPCurveTool;
        }
        else
        print(" ");
    }
    else
    KillCurveTool;
   
    
    
}
//exits tool

global proc stopTopoSketch()
{
    global int $SAGjobnum;
    
    KillCurveTool;
   
    
   //scriptJob -kill $SAGjobnum -force;
    
   string $selectedel[] = `ls -sl`;
    
   if(size($selectedel)==0)
   {
    
       makeLive -n;
    
    
   }
   else
   {
        select -cl;
        makeLive -n;
   }


}
//attaches patch to original mesh

global proc SAGExtractMesh()
{
    
    python "extractPatch()";
}
//restart curve tool for sketching curves
global proc SAGstartDrawing()
{
    global int $SAGflag;
    $SAGflag = 1;
    EPCurveTool;
   
    
}




